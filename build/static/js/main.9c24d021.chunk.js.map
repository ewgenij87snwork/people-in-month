{"version":3,"sources":["context/user/UserContext.js","components/Month.js","components/Months.js","components/Person.js","components/People.js","components/Legend.js","pages/Home.js","context/user/UserReducer.js","context/types.js","context/user/UserState.js","App.js","index.js"],"names":["userContext","createContext","Month","item","month","color","data","showPeople","useContext","UserContext","className","onMouseEnter","onMouseLeave","Months","months","getUsers","useEffect","Array","isArray","map","i","arr","length","key","Person","firstName","lastName","People","people","Legend","legend","slice","reverse","minPeople","Home","state","action","type","payload","UserState","props","useReducer","UserReducer","dispatch","a","axios","get","res","allUsers","monthName","monthData","person","dob","Date","reduce","groupedbyMonths","getMonth","push","find","x","Provider","value","children","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c24d021.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst userContext = createContext();\r\n\r\nexport default userContext;\r\n","import React, { Fragment, useContext } from 'react';\r\nimport UserContext from '../context/user/UserContext';\r\nconst Month = ({ item: { month, color, data } }) => {\r\n  const userContext = useContext(UserContext);\r\n  const { showPeople } = userContext;\r\n  return (\r\n    <Fragment>\r\n      <div className={`month ${color}`} onMouseEnter={() => showPeople(data)} onMouseLeave={() => showPeople(false)}>\r\n        {month}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Month;\r\n","import React, { useContext, useEffect } from 'react';\r\nimport Month from './Month';\r\nimport UserContext from '../context/user/UserContext';\r\n\r\nconst Months = () => {\r\n  const userContext = useContext(UserContext);\r\n  const { months, getUsers } = userContext;\r\n  // Функция, переданная в useEffect, будет запущена после того, как рендер будет зафиксирован на экране.\r\n  useEffect(() => {\r\n    getUsers();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <div className='months'>\r\n      {Array.isArray(months) &&\r\n        months.map((item, i, arr) => {\r\n          return arr.length && <Month key={i} item={item} />;\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Months;\r\n","import React from 'react';\r\n\r\nconst Person = ({ item: { firstName, lastName } }) => {\r\n  return (\r\n    <li className='person show-person'>\r\n      {firstName} {lastName}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Person;\r\n","import React, { useContext } from 'react';\r\nimport Person from '../components/Person';\r\nimport UserContext from '../context/user/UserContext';\r\n\r\nconst People = () => {\r\n  const userContext = useContext(UserContext);\r\n  const { people } = userContext;\r\n  return (\r\n    <div className='people'>\r\n      <ol>\r\n        {Array.isArray(people) &&\r\n          people.map((item, i, arr) => {\r\n            return arr.length && <Person key={i} item={item} />;\r\n          })}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default People;\r\n","import React, { useContext } from 'react';\r\nimport UserContext from '../context/user/UserContext';\r\n\r\nconst Legend = () => {\r\n  const userContext = useContext(UserContext);\r\n  const { legend } = userContext;\r\n\r\n  return (\r\n    <div className='legend'>\r\n      People in month:\r\n      {Array.isArray(legend) &&\r\n        legend\r\n          .slice()\r\n          .reverse()\r\n          .map((item, i, arr) => {\r\n            return (\r\n              <div className='legend-case' key={i}>\r\n                {' '}\r\n                <div className={`legend-color ${item.color}`}></div>\r\n                <div className='legend-title'>\r\n                  {i === 0\r\n                    ? ' - [' + item.minPeople + '-' + arr[i + 1].minPeople + '] '\r\n                    : i > 0 && i < arr.length - 1\r\n                    ? ' - [' + (item.minPeople + 1) + '-' + arr[i + 1].minPeople + '] '\r\n                    : i === arr.length - 1\r\n                    ? '- [' + (arr[arr.length - 1].minPeople + 1 + '+]')\r\n                    : ''}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Legend;\r\n","import React from 'react';\r\nimport Months from '../components/Months';\r\nimport People from '../components/People';\r\nimport Legend from '../components/Legend';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className='container'>\r\n      <div className='flex-wrap'>\r\n        <Months />\r\n        <People />\r\n      </div>\r\n      <Legend />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { GET_MONTHS, GET_PEOPLE } from '../types';\r\n\r\nexport default (state, action) => {\r\n  switch (action.type) {\r\n    case GET_MONTHS:\r\n      return {\r\n        ...state,\r\n        months: action.payload,\r\n      };\r\n    case GET_PEOPLE:\r\n      return {\r\n        ...state,\r\n        people: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const GET_MONTHS = 'GET_MONTHS';\r\nexport const GET_PEOPLE = 'GET_PEOPLE';\r\n","import React, { useReducer } from 'react';\r\nimport axios from 'axios';\r\nimport UserContext from './UserContext';\r\nimport UserReducer from './UserReducer';\r\nimport { GET_MONTHS } from '../types';\r\nimport { GET_PEOPLE } from '../types';\r\n\r\nconst UserState = (props) => {\r\n  const initialState = {\r\n    months: [],\r\n    people: [],\r\n    legend: [\r\n      { minPeople: 10, color: 'red' },\r\n      { minPeople: 6, color: 'green' },\r\n      { minPeople: 2, color: 'blue' },\r\n      { minPeople: 0, color: 'gray' },\r\n    ],\r\n  };\r\n  const [state, dispatch] = useReducer(UserReducer, initialState);\r\n  const { months, legend, people } = state;\r\n\r\n  const getUsers = async () => {\r\n    const res = await axios.get(`https://yalantis-react-school-api.yalantis.com/api/task0/users`);\r\n    const allUsers = res.data;\r\n\r\n    // I. Формирование months[], куда потом будут рапределяться люди по соответствующим месяцам:\r\n    // 1. Список названий месяцев\r\n    // 2. Отсортированные по месяцам люди\r\n    // 4. Соединение в один массив\r\n    // 3. Назначение цвета месяца в зависимости от количества людей\r\n\r\n    // 1.\r\n    const monthName = [\r\n      'January',\r\n      'February',\r\n      'March',\r\n      'April',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'August',\r\n      'September',\r\n      'October',\r\n      'November',\r\n      'December',\r\n    ];\r\n\r\n    // 2.\r\n    let monthData = allUsers\r\n      .map((person) => ({ ...person, dob: new Date(person.dob) }))\r\n      .reduce((groupedbyMonths, person) => {\r\n        const month = person.dob.getMonth();\r\n        if (groupedbyMonths[month]) {\r\n          groupedbyMonths[month].push(person);\r\n        } else {\r\n          groupedbyMonths[month] = [person];\r\n        }\r\n        return groupedbyMonths;\r\n      }, {});\r\n\r\n    // 3.\r\n    for (let i = 0; i < 12; i++) {\r\n      months.push({ month: monthName[i], data: monthData[i] });\r\n    }\r\n\r\n    // 4.\r\n    months.map((item) => {\r\n      return (item.color = legend.find((x) => item.data.length > x.minPeople).color);\r\n    });\r\n\r\n    dispatch({\r\n      type: GET_MONTHS,\r\n      payload: months,\r\n    });\r\n  };\r\n\r\n  // II. Показ списка людей при наведении\r\n  const showPeople = (data) => {\r\n    dispatch({\r\n      type: GET_PEOPLE,\r\n      payload: data,\r\n    });\r\n  };\r\n  return (\r\n    <UserContext.Provider\r\n      value={{\r\n        getUsers,\r\n        showPeople,\r\n        months: months,\r\n        people: people,\r\n        legend: legend,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport default UserState;\r\n","import React from 'react';\nimport Home from './pages/Home';\nimport './App.css';\nimport UserState from './context/user/UserState';\n\nconst App = () => {\n  return (\n    <UserState>\n      <Home />\n    </UserState>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}